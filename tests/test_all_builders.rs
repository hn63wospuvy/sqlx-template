use sqlx_template::SqliteTemplate;
use sqlx::{FromRow, SqlitePool};

#[derive(SqliteTemplate, FromRow, Debug, Clone)]
#[table("users")]
#[tp_select_builder(
    with_email_domain = "email LIKE :domain$String",
    with_score_range = "score BETWEEN :min$i32 AND :max$i32"
)]
pub struct User {
    pub id: i32,
    pub email: String,
    pub score: i32,
    pub active: bool,
    pub created_at: String,
    pub name: String,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("Testing all builders with custom conditions");
    
    // Create in-memory SQLite database
    let pool = SqlitePool::connect(":memory:").await?;
    
    // Create table
    sqlx::query(
        r#"
        CREATE TABLE users (
            id INTEGER PRIMARY KEY,
            email TEXT NOT NULL,
            score INTEGER NOT NULL,
            active BOOLEAN NOT NULL,
            created_at TEXT NOT NULL,
            name TEXT NOT NULL
        )
        "#,
    )
    .execute(&pool)
    .await?;
    
    // Insert test data
    sqlx::query("INSERT INTO users (email, score, active, created_at, name) VALUES (?, ?, ?, ?, ?)")
        .bind("alice@company.com")
        .bind(85)
        .bind(true)
        .bind("2023-01-01")
        .bind("Alice")
        .execute(&pool)
        .await?;
    
    sqlx::query("INSERT INTO users (email, score, active, created_at, name) VALUES (?, ?, ?, ?, ?)")
        .bind("bob@personal.com")
        .bind(65)
        .bind(false)
        .bind("2022-01-01")
        .bind("Bob")
        .execute(&pool)
        .await?;
    
    // Test SELECT builder with custom conditions
    println!("\n=== SELECT Builder Tests ===");
    
    println!("SQL: {}", User::builder_select().build_sql());
    
    let users = User::builder_select()
        .with_email_domain("%@company.com")?
        .find_all(&pool)
        .await?;
    println!("Users with company email: {} found", users.len());
    
    let users = User::builder_select()
        .with_score_range(60, 90)?
        .find_all(&pool)
        .await?;
    println!("Users with score 60-90: {} found", users.len());
    
    // Note: UPDATE and DELETE builders are generated by UpdateTemplate and DeleteTemplate
    // which are separate derives. SqliteTemplate only generates SELECT builder.
    
    // Test column list in SELECT (should not be SELECT *)
    let sql = User::builder_select().active(&true).unwrap().build_sql();
    println!("\nGenerated SQL: {}", sql);
    assert!(sql.contains("SELECT id, email, score, active, created_at, name FROM"));
    assert!(!sql.contains("SELECT * FROM"));
    println!("âœ… SELECT uses column list instead of *");
    
    Ok(())
}
